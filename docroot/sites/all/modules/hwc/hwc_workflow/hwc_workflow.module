<?php
/**
 * @file
 * Code for the HWC Workflow feature.
 */

include_once 'hwc_workflow.features.inc';

define('HWC_ROLE_CAMPAIGN_PROJECT_MANAGER', 'Campaign Project Manager');

/**
 * Implements hook_menu_alter().
 */
function hwc_workflow_menu_alter(&$items) {
  unset($items['node/%node/review']);
}

/**
 * Implements hook_menu().
 */
function hwc_workflow_menu() {
  $items = array();
  $items['node/%node/cpm-review'] = array(
    'title' => 'Review',
    'description' => 'Review page for the OSHA reviewing workflow.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hwc_workflow_node_cpm_assign_form', 1),
    'access arguments' => array('access hwc review tab'),
    'file' => 'hwc_workflow.cpm.inc',
    'weight' => 9,
  );
  return $items;
}

/**
 * Implements hook_theme().
 *
 * @codeCoverageIgnore
 */
function hwc_workflow_theme() {
  return array(
    'hwc_workflow_node_cpm_assign_form' => array(
      'render element' => 'form',
      'file' => 'hwc_workflow.cpm.inc',
    ),
  );
}

/**
 * Implements Elysia hook_cronapi().
 */
function hwc_workflow_cronapi() {
  return array('hwc_workflow_partner_content_cron' => array(
    'description' => 'Set partners content from final draft to next state.',
    'rule' => '*/5 * * * *',
  ));
}

/**
 * Implements hook_cron().
 */
function hwc_workflow_cron() {
  hwc_workflow_partner_content_cron();
}

/**
 * Cron callback to auto moderate partners' content.
 */
function hwc_workflow_partner_content_cron() {
  // Moderate content created by a partner, that is in Final Draft for some time.
  $users = OshaWorkflowPermissions::getUsersByRole(ROLE_CAMPAIGN_PARTNER);
  $uids = array();
  foreach ($users as $usr) {
    $uids[] = $usr->uid;
  }

  // Getting the nids that have passed the final draft state.
  $subquery = db_select('workbench_moderation_node_history', 'wm')
    ->fields('wm', array('nid'))
    ->condition('wm.state', 'final_draft')
    ->condition('wm.current', 1);

  $time_limit = _hwc_workflow_partner_content_get_time_limit();
  // Getting content that needs to be auto moderated.
  $query = db_select('workbench_moderation_node_history', 'wmh')
    ->fields('wmh', array('nid'))
    ->distinct()
    ->condition('wmh.from_state', 'draft')
    ->condition('wmh.state', 'final_draft')
    ->condition('wmh.nid', $subquery, 'IN')
    ->condition('wmh.uid', $uids, 'IN')
    ->condition('wmh.stamp', $time_limit, '<=')
    ->orderBy('wmh.hid', 'DESC')
    ->execute();

  while ($row = $query->fetchAssoc()) {
    $node = node_load($row['nid']);
    if (!empty($node)) {
      $current_node = workbench_moderation_node_current_load($node);
      if (!empty($current_node->workbench_moderation['current'])
        && $current_node->workbench_moderation['current']->state == 'final_draft') {
        // Moderate the content.
        workbench_moderation_moderate($current_node, OSHA_WORKFLOW_STATE_TO_BE_REVIEWED);
        watchdog('hwc_workflow', 'Node !title automoderated to !state', array('!title' => $current_node->title, '!state' => OSHA_WORKFLOW_STATE_TO_BE_REVIEWED), WATCHDOG_INFO);
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function hwc_workflow_permission() {
  $permissions = array();
  $permissions['select content section'] = array('title' => t("Can select section of a content"));
  $permissions['assign cpm to node'] = array('title' => t("Assign CPMs to a node"));
  $permissions['access hwc review tab'] = array('title' => t("Access Review tab on a node"));

  return $permissions;
}

/**
 * Implements hook_mail_alter().
 */
function hwc_workflow_mail_alter(&$message) {
  if (strpos($message['key'], 'hwc_workflow')) {
    // Block mails that are send for hwc workflow if user's preference.
    $user = user_load_by_mail($message['to']);
    $send_notif = variable_get('osha_workflow_send_mail', FALSE);
    // when using rereoute mail, the to address is not of an user.
    $usr_receive_notif = empty($user) || !empty($user->field_cmw_mail_notifications[LANGUAGE_NONE][0]['value']);
    if (!$send_notif || !$usr_receive_notif) {
      $message['send'] = FALSE;
    }
  }
}

/**
 * Implements hook_workbench_moderation_transition().
 */
function hwc_workflow_workbench_moderation_transition($node, $old, $new) {
  module_load_include('inc', 'hwc_workflow', 'hwc_workflow.cpm');

  // Assign default cpms list
  $from_fdraft_to_review = $old == OSHA_WORKFLOW_STATE_FINAL_DRAFT && $new == OSHA_WORKFLOW_STATE_TO_BE_REVIEWED;
  $from_draft_to_review = $old == OSHA_WORKFLOW_STATE_DRAFT && $new == OSHA_WORKFLOW_STATE_TO_BE_REVIEWED;
  if ($from_fdraft_to_review || $from_draft_to_review) {
    $existing_cpms = _hwc_workflow_get_project_managers_entries($node->nid);
    if (empty($existing_cpms)) {
      hwc_workflow_assign_default_cpm($node);
    }
  }

  if ($old != OSHA_WORKFLOW_STATE_TO_BE_APPROVED && $new == OSHA_WORKFLOW_STATE_TO_BE_APPROVED) {
    // If to be reviewed it's skipped - assign default cpms.
    $existing_cpms = _hwc_workflow_get_project_managers_entries($node->nid);
    if (empty($existing_cpms)) {
      $remaining_approvers = hwc_workflow_assign_default_cpm($node);
      reset($remaining_approvers);
      $next_approver  = array_shift($remaining_approvers);
    }
    else {
      // Reset approver votes (if node rejected and it's second time reviewed).
      _hwc_workflow_cpm_reset_votes($node->nid);
      $remaining_approvers = _hwc_workflow_get_remaining_cpm_approvers($node->nid);
      reset($remaining_approvers);
      $next_approver = array_shift($remaining_approvers);
    }
    // Invoke rule for node_to_be_approved.
    if (!empty($next_approver)) {
      rules_invoke_event('node_to_be_approved', $node, $next_approver, $remaining_approvers);
    }
  }
}

/**
 *  Set default cpms list for a node.
 */
function hwc_workflow_assign_default_cpm($node) {
  $default_cpms = _hwc_workflow_get_default_cpm();
  $weight = 0;
  foreach ($default_cpms as $cpm) {
    $row = array(
      'uid' => $cpm->uid,
      'weight' => $weight,
      'nid' => $node->nid,
    );
    _hwc_workflow_admin_approvers_save_row($row);
    $weight++;
  }
  drupal_set_message('Default Campaign Project Managers were set for this node');
  return $default_cpms;
}

/**
 * Implements hook_node_access().
 */
function hwc_workflow_node_access($node, $op, $account) {
  if (($op == 'update' || $op == 'delete')
    && in_array($node->type, ncw_migration_get_migrated_bundles())
    && $node->uid == 0) {
    return NODE_ACCESS_DENY;
  }

  // Administrators skip further validations
  if (in_array(OSHA_WORKFLOW_ROLE_ADMINISTRATOR, $account->roles)) {
    return NODE_ACCESS_IGNORE;
  }

  // Review Managers have access based on perm
  // skip additional validations..
  if (in_array(OSHA_WORKFLOW_ROLE_REVIEW_MANAGER, $account->roles)) {
    return NODE_ACCESS_IGNORE;
  }

  // Don't allow CPM if not assign to node.
  if ($op == 'update' && in_array(HWC_ROLE_CAMPAIGN_PROJECT_MANAGER, $account->roles)) {
    module_load_include('inc', 'hwc_workflow', 'hwc_workflow.cpm');
    if (!_hwc_workflow_node_has_cmp($node, $account)) {
      return NODE_ACCESS_DENY;
    }
  }

  // Do not allow media partners to create news
  if ($node == 'events' && $op == 'create' && in_array(ROLE_CAMPAIGN_PARTNER, $account->roles)) {
    $partner = hwc_partner_get_account_partner($account);
    if (hwc_partner_is_mp($partner)) {
      // drupal_set_message('Partners are not allowed to create events.', 'error');
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_form_alter().
 */
function hwc_workflow_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id == 'hwc_admin_config_form') {
    $form['hwc_workflow_partner_content_minutes_gap_autosubmit'] = array(
      '#type' => 'textfield',
      '#title' => 'How many minutes can the partner still edit the node?',
      '#default_value' => variable_get('hwc_workflow_partner_content_minutes_gap_autosubmit', 30),
      '#attributes' => array('size' => 5),
      '#description' => "After partner submits the content, he can still edit for this amount of time"
    );
  }
  if (in_array($form_id, array('events_node_form', 'news_node_form'))) {
    $node = $form_state['node'];
    $can_delete = user_access("delete any {$node->type} content") || user_access("delete own {$user->type} content");
    if (!empty($node->nid) && $can_delete && in_array(ROLE_CAMPAIGN_PARTNER, $user->roles)) {
      $form['actions']['delete'] = array(
        '#type' => 'submit',
        '#value' => t('Delete'),
        '#weight' => 19,
        '#submit' => array('node_form_delete_submit')
      );
    }
  }

  if ($form_id == 'workbench_moderation_moderate_form' && isset($form['node']['#value'])) {
    // Append the approval buttons in workbench moderation (on node view).q
    module_load_include('inc', 'hwc_workflow', 'hwc_workflow.cpm');
    $form['#node'] = $form['node']['#value'];
    hwc_workflow_node_cpm_actions_append($form, $form['node']['#value']);
    if (!empty($form['cpm_actions'])) {
      $form['review'] = array(
        '#type' => 'markup',
        '#markup' => '<p>You can Review the content using the Review tab or using the buttons below.</p>',
        '#weight' => 5,
      );
      $form['cpm_actions']['#weight'] = 6;
    }
  }

  // Implements permission select content section.
  if (isset($form['#node_edit_form']) && !empty($form['workbench_access']['workbench_access'])) {
    $form['workbench_access']['workbench_access']['#access'] = user_access('select content section');
  }
  if ($form_id == 'entity_collection_content_add_form') {
    if ($collection = $form_state['entity_collection']) {
      if ($collection->bundle == 'campaigns_partner_list') {
        $options = osha_workflow_users_get_users_from_role_as_options(HWC_ROLE_CAMPAIGN_PROJECT_MANAGER);
        $users = array();
        foreach ($options as $uid => $account) {
          $users['user:' . $uid] = $account;
        }
        $form['add_content']['#title'] = t('Add CPM into the list');
        $form['add_content']['entity_type']['#access'] = FALSE;
        $form['add_content']['content_select'] = array(
          '#type' => 'select',
          '#options' => $users,
          '#description' => t('Select the person account from the list then press <b>Add content</b>'),
        );
      }
    }
  }
  if (!empty($form['workbench_access']['workbench_access']['#options']['section'])) {
    $form['workbench_access']['workbench_access']['#title'] = 'Partner';
    $form['workbench_access']['workbench_access']['#options']['section'] = 'All partners';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hwc_workflow_form_news_node_form_alter(&$form, &$form_state) {
  global $user;
  if (in_array(ROLE_CAMPAIGN_PARTNER, $user->roles) && count($user->roles) == 2) {
    foreach($user->workbench_access as $user_id_section => $value) {
      foreach($form['workbench_access']['workbench_access']['#options'] as $wb_id_section => $label) {
        if ($user_id_section == $wb_id_section) {
          $form['workbench_access']['workbench_access']['#default_value'] = $user_id_section;
          $form['workbench_access']['workbench_access']['#access'] = FALSE;
          break;
        }
      }
    }
    if (empty($form['workbench_access']['workbench_access']['#default_value'])) {
      drupal_goto('<front>');
    }
    $form['field_expiration_date']['#access'] = FALSE;
    $form['field_tags']['#access'] = FALSE;
    $form['field_activity']['#access'] = FALSE;
    $form['#after_build'][] = 'hwc_workflow_node_form_after_build_hide_hints';

    _hwc_workflow_partner_node_form_alter($form, $form_state);
  }
  else if (count(array_intersect(array('administrator', ROLE_SUPERVISOR), $user->roles))) {
    if (!empty($_GET['workbench_access']) && intval($_GET['workbench_access'])) {
      $form['workbench_access']['workbench_access']['#default_value'] = intval($_GET['workbench_access']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hwc_workflow_form_events_node_form_alter(&$form, &$form_state) {
  global $user;
  if (in_array(ROLE_CAMPAIGN_PARTNER, $user->roles) && count($user->roles) == 2) {
    foreach($user->workbench_access as $user_id_section => $value) {
      foreach($form['workbench_access']['workbench_access']['#options'] as $wb_id_section => $label) {
        if ($user_id_section == $wb_id_section) {
          $form['workbench_access']['workbench_access']['#default_value'] = $user_id_section;
          $form['workbench_access']['workbench_access']['#access'] = FALSE;
          break;
        }
      }
    }
    if (empty($form['workbench_access']['workbench_access']['#default_value'])) {
      drupal_goto('<front>');
    }
    $form['field_partner_id']['#access'] = FALSE;
    $form['field_schedule']['#access'] = FALSE;
    $form['field_speaker']['#access'] = FALSE;
    $form['field_activity']['#access'] = FALSE;
    $form['#after_build'][] = 'hwc_workflow_node_form_after_build_hide_hints';

    _hwc_workflow_partner_node_form_alter($form, $form_state);
  }
  else if (count(array_intersect(array('administrator', ROLE_SUPERVISOR), $user->roles))) {
    if (!empty($_GET['workbench_access']) && intval($_GET['workbench_access'])) {
      $form['workbench_access']['workbench_access']['#default_value'] = intval($_GET['workbench_access']);
    }
  }
  if (!empty($form['workbench_access']['workbench_access']['#options']['section'])) {
    $form['workbench_access']['workbench_access']['#title'] = 'Partner';
    $form['workbench_access']['workbench_access']['#options']['section'] = 'All partners';
  }
}

/**
 * Implements hook_js_alter().
 *
 * Make summary always expanded for field of "Long text and summary" type.
 */
function hwc_workflow_js_alter(&$javascript) {
  global $user;
  if (in_array(ROLE_CAMPAIGN_PARTNER, $user->roles) && count($user->roles) == 2 && current_path() == 'node/add/events') {
    $js_path = drupal_get_path('module', 'text') . '/text.js';

    if (isset($javascript[$js_path])) {
      unset($javascript[$js_path]);
    }
  }
}

function hwc_workflow_node_form_after_build_hide_hints($form, &$form_state) {
  $key = array_pop(element_children($form['body']));
  if ($key && !empty($form['body'][$key][0]['format'])) {
    $form['body'][$key][0]['format']['#attributes']['class'][] = 'hidden';
  }
  if (!empty($form['field_summary'])) {
    $key = array_pop(element_children($form['field_summary']));
    if ($key && !empty($form['field_summary'][$key][0]['format'])) {
      $form['field_summary'][$key][0]['format']['#attributes']['class'][] = 'hidden';
    }
  }

  return ($form);
}

/**
 * Implements hook_workbench_moderation_access_alter().
 *
 * @TODO implement this
 */
function hwc_workflow_workbench_moderation_access_alter(&$access, $op, $node) {

}

/**
 * Adds and hides elements on node add/edit for partners.
 */
function _hwc_workflow_partner_node_form_alter(&$form, &$form_state) {
  $form['revision_information']['#access'] = FALSE;
  if (!empty($form['workbench_moderation_state_current']['#value']) && $form['workbench_moderation_state_current']['#value'] == 'draft') {
    $form['actions']['submit']['#access'] = FALSE;
    $form['actions']['save_preview'] = array(
      '#type' => 'submit',
      '#value' => t('Save this !type item as draft', array('!type' => $form['type']['#value'])),
      '#submit' => array('hwc_workflow_node_form_submit_preview'),
    );
    $form['actions']['send_for_approval'] = array(
      '#type' => 'submit',
      '#value' => t('Submit !type item for validation', array('!type' => $form['type']['#value'])),
      '#submit' => array('hwc_workflow_node_form_submit_send'),
    );
  }
  if (!empty($form['actions']['preview_changes'])) {
    $form['actions']['preview_changes']['#access'] = FALSE;
  }
}

/**
 * Submit callback for Partner's Preview button.
 */
function hwc_workflow_node_form_submit_preview($form, &$form_state) {
  $form_state['values']['workbench_moderation_state_new'] = 'draft';
  $form_state['input']['workbench_moderation_state_new'] = 'draft';
  node_form_submit($form, $form_state);
}

/**
 * Submit callback for Partner's Send to approve button.
 */
function hwc_workflow_node_form_submit_send($form, &$form_state) {
  $form_state['values']['workbench_moderation_state_new'] = 'final_draft';
  $form_state['input']['workbench_moderation_state_new'] = 'final_draft';
  node_form_submit($form, $form_state);
}

function _hwc_workflow_get_node_final_draft_time($node) {
  $transition = db_select('workbench_moderation_node_history', 'wmh')
    ->condition('wmh.nid', $node->nid)
    ->condition('wmh.from_state', 'draft')
    ->condition('wmh.state', 'final_draft')
    ->orderBy('wmh.hid', 'DESC')
    ->execute()
    ->fetchAssoc();
  if (!empty($transition)) {
    return $transition['stamp'];
  }
  return FALSE;
}

/**
 * Get the relative time limit that a partner content should should be auto
 * moderated to to be reviewed.
 */
function _hwc_workflow_partner_content_get_time_limit() {
  $time_gap = (int) variable_get('hwc_workflow_partner_content_minutes_gap_autosubmit', 30);
  return time() - $time_gap * 60;
}

function _hwc_workflow_user_has_section($user, $section_id) {
  foreach(array_keys($user->workbench_access) as $section_id) {
    if (in_array($section_id, $user->workbench_access)) {
      return TRUE;
    }
  }
  return FALSE;
}

function _hwc_workflow_load_users_by_section($section_id) {
  $uids = db_select('workbench_access_user', 'wau')
    ->fields('wau', array('uid'))
    ->condition('access_scheme', 'taxonomy')
    ->condition('access_id', $section_id)
    ->execute()
    ->fetchAllKeyed();
  $uids = array_keys($uids);
  return user_load_multiple($uids);
}

function _hwc_workflow_get_default_cpm() {
  $entity_collection = entity_collection_load('campaigns_partner_default_list');
  $contexts = _entity_collection_get_contexts($entity_collection);
  $tree = EntityCollectionStorage::getBundleStorage($entity_collection->bundle)->retrieve($entity_collection, $contexts);
  $rows = $tree->getFlat();
  $uids = array();
  foreach ($rows as $row) {
    $uids[] = $row->entity_id;
  }
  $users = user_load_multiple($uids);
  foreach ($users as &$user) {
    $user->osha_workflow_node_approval_saved = FALSE;
  }
  return $users;
}
